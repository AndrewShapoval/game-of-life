{"version":3,"sources":["App.module.scss","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","App","useState","numRows","setNumRows","numCols","setNumCols","newNumRows","setNewNumRows","newNumCols","setNewNumCols","operations","installCells","useEffect","setGrid","generateEmptyGrid","rows","i","push","Array","from","grid","lastGrid","setLastGrid","console","log","running","setRunning","runningRef","useRef","current","runningLogicLife","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","runSimulation","setTimeout","className","styles","app","buttons","button","onClick","disabled","error","undefined","type","placeholder","onChange","e","Number","currentTarget","value","container","map","col","busyCell","cell","newGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07a7a892.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__oyq-B\",\"buttons\":\"App_buttons__3-jbj\",\"error\":\"App_error__25EbU\",\"button\":\"App_button__vEO_w\",\"container\":\"App_container__1t4xa\",\"grid\":\"App_grid__2BJoc\",\"rows\":\"App_rows__rq0_1\",\"cell\":\"App_cell__3Iv0F\",\"busyCell\":\"App_busyCell__270Pm\"};","import React, {useEffect, useRef, useState} from 'react';\nimport styles from './App.module.scss';\nimport produce from \"immer\"\n\nexport const App: React.FC = () => {\n\n    const [numRows, setNumRows] = useState<number>(50)\n    const [numCols, setNumCols] = useState<number>(50)\n    const [newNumRows, setNewNumRows] = useState<number>(10)\n    const [newNumCols, setNewNumCols] = useState<number>(10)\n\n    const operations = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\n\n    const installCells = [[21, 24], [23, 23], [23, 25], [24, 22], [24, 26], [25, 22], [25, 26], [26, 22], [26, 26],\n        [27, 22], [27, 26], [28, 22], [28, 26], [29, 22], [29, 26], [30, 23], [30, 25], [31, 24]]\n\n    useEffect(() => {\n        setGrid(generateEmptyGrid())\n    }, [numRows, numCols])\n\n    const generateEmptyGrid = () => {\n        const rows = []\n        for (let i = 0; i < numRows; i++) {\n            rows.push(Array.from(Array(numCols), () => 0))\n        }\n        return rows\n    }\n\n    const [grid, setGrid] = useState(() => {\n        return generateEmptyGrid()\n    })\n\n    const [lastGrid, setLastGrid] = useState(() => {\n        return generateEmptyGrid()\n    })\n    console.log(grid)\n    const [running, setRunning] = useState(false)\n    const runningRef = useRef(running)\n    runningRef.current = running\n\n    const runningLogicLife = () => {\n        setGrid((g) => {\n            setLastGrid(g)\n            return produce(g, gridCopy => {\n                for (let i = 0; i < numRows; i++) {\n                    for (let k = 0; k < numCols; k++) {\n                        let neighbors = 0\n                        operations.forEach(([x, y]) => {\n                            const newI = i + x\n                            const newK = k + y\n                            if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                                neighbors += g[newI][newK]\n                            }\n                        })\n\n                        if (neighbors < 2 || neighbors > 3) {\n                            gridCopy[i][k] = 0\n                        } else if (g[i][k] === 0 && neighbors === 3) {\n                            gridCopy[i][k] = 1\n                        }\n                    }\n                }\n            })\n        })\n    }\n\n    const runSimulation = () => {\n        if (!runningRef.current) {\n            return\n        }\n        runningLogicLife()\n        setTimeout(runSimulation, 1000)\n    }\n\n    const installCellsGrid = () => {\n        setGrid((g) => {\n            debugger\n            setLastGrid(g)\n            return produce(g, gridCopy => {\n                for (let i = 0; i < numRows; i++) {\n                    for (let k = 0; k < numCols; k++) {\n                        installCells.forEach(([x, y]) => {\n                            if (x === i && y === k) {\n                                gridCopy[i][k] = 1\n                            }\n                        })\n                    }\n                }\n            })\n        })\n    }\n\n    return (\n        <div className={styles.app}>\n            <h1>Game of Life</h1>\n            <div className={styles.buttons}>\n                <button className={styles.button} onClick={() => {\n                    setRunning(!running)\n                    if (!running) {\n                        runningRef.current = true\n                        runSimulation()\n                    }\n                }}\n                >{running ? \"Stop\" : \"Start\"}\n                </button>\n                <button className={styles.button} onClick={() => {\n                    setGrid(generateEmptyGrid())\n                }}\n                >Clear\n                </button>\n                <button className={styles.button} disabled={numRows < 35 || numCols < 45} onClick={() => {\n                    installCellsGrid()\n                }}>\n                    Installed cells\n                </button>\n                <button className={styles.button} onClick={() => {\n                    runningLogicLife()\n                }}>\n                    Next move\n                </button>\n                <button className={styles.button} disabled={grid === lastGrid} onClick={() => {\n                    setGrid(lastGrid)\n                }}>\n                    Last move\n                </button>\n                {newNumRows < 10 || newNumRows > 100 || newNumCols < 10 || newNumCols > 100\n                    ? <div className={styles.error}>\n                        The number must be between 10 and 100\n                    </div>\n                    : undefined}\n                <div className={styles.button}>\n                    <input type=\"number\" placeholder={`${newNumRows} rows`}\n                           onChange={(e) => setNewNumRows(Number(e.currentTarget.value))}/>\n                    <button disabled={newNumRows < 10 || newNumRows > 100} onClick={(e) => {\n                        setNumRows(newNumRows)\n                    }}\n                    >Set rows\n                    </button>\n                </div>\n                <div className={styles.button}>\n                    <input type=\"number\" placeholder={`${newNumCols} columns`}\n                           onChange={(e) => setNewNumCols(Number(e.currentTarget.value))}/>\n                    <button disabled={newNumCols < 10 || newNumCols > 100} onClick={() => {\n                        setNumCols(newNumCols)\n                    }}>Set columns\n                    </button>\n                </div>\n            </div>\n            <div className={styles.container}>\n                <div className={styles.grid}>\n                    {grid.map((rows, i) =>\n                        <div key={i} className={styles.rows}>\n                            {rows.map((col, k) =>\n                                <div key={`${i}-${k}`} className={grid[i][k] ? styles.busyCell : styles.cell}\n                                     onClick={() => {\n                                         const newGrid = produce(grid, gridCopy => {\n                                             gridCopy[i][k] = gridCopy[i][k] ? 0 : 1\n                                         })\n                                         setGrid(newGrid)\n                                     }}/>\n                            )}</div>\n                    )}\n                    <div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}